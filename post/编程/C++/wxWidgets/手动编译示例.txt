对C++
静态库：.a .lib
动态库：.so .dll

gcc810_dll\mswud对应debug头文件，gcc810_dll\mswu对应release头文件
-mwindows表示生成windows应用程序，不配置的话启动程序会有一个黑框出现。
-pipe表示编译时使用管道
-Wall表示编译时输出全部警告

-g 在编译的时候，产生调试信息。

-Wl:rpath,添加运行时库路径
-Wl:rpath, 后面也是路径，运行的时候用。这条编译指令会在编译时记录到target文件中，所以编译之后的target文件在执行时会按这里给出的路径去找库文件。

如：-Wl:rpath=/home/hello/lib

表示将/home/hello/lib目录作为程序运行时第一个寻找库文件的目录，程序寻找顺序是：/home/hello/lib-->/usr/lib-->/usr/local/lib。

可以加多个包含路径，程序在运行时的寻找顺序为添加的顺序。
-L,添加链接库路径
-L 后跟路径，告诉链接器从哪找库(.so文件)，只有在链接时会用到。

如：-L /home/hello/lib

表示将/home/hello/lib目录作为第一个寻找库文件的目录，寻找顺序是：/home/hello/lib-->/usr/lib-->/usr/local/lib。

可以加多个包含路径，链接器的寻找顺序为添加的顺序。

-l,添加引用链接库
-l 在链接时用到，它的作用是告诉链接器，要用到哪个库。 如：-l pthread

告诉链接器(linker)，程序需要链接pthread这个库,这里的pthread是库名不是文件名，具体来说文件句是libpthread.so。

-I,添加包含路径
-I 在编译时用，告诉编译器去哪个路径下找文件

如：-I /home/hello/include

表示将/home/hello/include目录作为第一个寻找头文件的目录。

编译器的寻找顺序是：/home/hello/include-->/usr/include-->/usr/local/include。如果在/home/hello/include中有个文件hello.h，则在程序中用#include就能引用到这个文件。

可以加多个包含路径，编译器的寻找顺序为添加的顺序。



g++ -I（大写i） 与-L（大写l）-l(小写l) 的作用与学习 使用静态库 编译的时候 需要加上 static
linux 下 g++编译程序时，-I（大写i） 与-L（大写l）-l(小写l) 的作用
作为一个linux入门级使用者，gcc/g++ 的简单操作已经用过多次， 但是有时稍微复杂一点的程序就会使用到库。在遇到问题的时候我查了挺多前辈总结的资料，也留个脚本希望对朋友们有个帮助。如果也能处理你的问题，我会感到很开心，嘻嘻。
例如：libz.so
g++ -o compress  compress.cpp  -I/home/include/  -L/lib/  -lz     //别忘记了小  l和z  l是指定库名
（1） -I (大写i)
编译程序按照-I指定的路进去搜索头文件。
-I/home/include/表示将-I/home/include/目录作为第一个寻找头文件的目录，寻找的顺序是：
 /home/include/ -->/usr/include-->/usr/local/include
（2）-L(大写l)
表示：编译程序按照－L指定的路进去寻找库文件，一般的在-L的后面可以一次用-l指定多个库文件。
-L/lib/表示到/lib/目录下找库文件
（3）-l(小写l)
表示：编译程序到系统默认路进搜索，如果找不到，到当前目录，如果当前目录找不到，则到LD_LIBRARY_PATH等环境变量置顶的路进去查找，如果还找不到，那么编译程序提示找不到库。
本例子使用的是gunzip库，库文件名是libz.so，库名是z。很容易看出，把库文件名的头lib和尾.so去掉就是库名了。


※去除默认生成的wxWidgets程序的控制台窗口

由于编译时使用的是控制台方式，所以生成的程序会多出一个控制台窗口，

应该使用GUI方式。解决的方法是向链接器ld传入“--subsystem,windows”参数，这需要用-Wl让gcc把这个参数传给ld。