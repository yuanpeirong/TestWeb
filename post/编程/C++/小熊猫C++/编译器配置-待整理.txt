- 编译器配置: MinGW GCC x86_64 in UTF-8, Release
- 编译器配置: UTF-8 MinGW GCC x86_64，发布
./mingw64/bin/g++.exe
g++.exe  "hello.cpp" -o "hello.exe" -pedantic -O2 -pipe -Wall -Wextra -s IDEPATH/mingw64/x86_64-w64-mingw32/lib/utf8init.o IDEPATH/mingw64/x86_64-w64-mingw32/lib/utf8manifest.o -static

- 编译器配置: MinGW GCC x86_64 in UTF-8, Debug
- 编译器配置: UTF-8 MinGW GCC x86_64，调试
IDEPATH/mingw64/bin/g++.exe
g++.exe  "hello.cpp" -o "hello.exe" -pedantic -g3 -pipe -Wall -Wextra IDEPATH/mingw64/x86_64-w64-mingw32/lib/utf8init.o IDEPATH/mingw64/x86_64-w64-mingw32/lib/utf8manifest.o

- 编译器配置: MinGW GCC x86_64 in UTF-8, Debug with ASan
- 编译器配置: UTF-8 MinGW GCC x86_64，调试（带 ASan）
IDEPATH/mingw64/bin/g++.exe
g++.exe  "hello.cpp" -o "hello.exe" -pedantic -g3 -pipe -Wall -Wextra IDEPATH/mingw64/x86_64-w64-mingw32/lib/utf8init.o IDEPATH/mingw64/x86_64-w64-mingw32/lib/utf8manifest.o


- 编译器配置: MinGW GCC x86_64 in system code page, Release
- 编译器配置: 系统代码页 MinGW GCC x86_64，发布
IDEPATH/mingw64/bin/g++.exe
g++.exe  "hello.cpp" -o "hello.exe" -finput-charset=UTF-8 -fexec-charset=gbk -pedantic -O2 -pipe -Wall -Wextra -s -static

- 编译器配置: MinGW GCC x86_64 in system code page, Debug
- 编译器配置: 系统代码页 MinGW GCC x86_64，调试
IDEPATH/mingw64/bin/g++.exe
g++.exe  "hello.cpp" -o "hello.exe" -finput-charset=UTF-8 -fexec-charset=gbk -pedantic -g3 -pipe -Wall -Wextra

- 编译器配置: MinGW GCC x86_64 in system code page, Debug with ASan
- 编译器配置: 系统代码页 MinGW GCC x86_64，调试
IDEPATH/mingw64/bin/g++.exe
g++.exe  "hello.cpp" -o "hello.exe" -finput-charset=UTF-8 -fexec-charset=gbk -pedantic -g3 -pipe -Wall -Wextra


- 编译器配置: LLVM-MinGW Clang x86_64, Release
- 编译器配置: LLVM-MinGW Clang x86_64，发布
IDEPATH/llvm-mingw/bin/x86_64-w64-mingw32-clang++.exe
x86_64-w64-mingw32-clang++.exe  "hello.cpp" -o "hello.exe" -pedantic -O2 -pipe -Wall -Wextra -s IDEPATH/llvm-mingw/x86_64-w64-mingw32/lib/utf8init.o IDEPATH/llvm-mingw/x86_64-w64-mingw32/lib/utf8manifest.o -static

- 编译器配置: LLVM-MinGW Clang x86_64, Debug
- 编译器配置: LLVM-MinGW Clang x86_64，调试
IDEPATH/llvm-mingw/bin/x86_64-w64-mingw32-clang++.exe
x86_64-w64-mingw32-clang++.exe  "hello.cpp" -o "hello.exe" -pedantic -g3 -pipe -Wall -Wextra IDEPATH/llvm-mingw/x86_64-w64-mingw32/lib/utf8init.o IDEPATH/llvm-mingw/x86_64-w64-mingw32/lib/utf8manifest.o

- 编译器配置: LLVM-MinGW Clang x86_64, Debug with ASan
- 编译器配置: LLVM-MinGW Clang x86_64，调试（带 ASan）
IDEPATH/llvm-mingw/bin/x86_64-w64-mingw32-clang++.exe
x86_64-w64-mingw32-clang++.exe  "hello.cpp" -o "hello.exe" -pedantic -g3 -pipe -Wall -Wextra IDEPATH/llvm-mingw/x86_64-w64-mingw32/lib/utf8init.o IDEPATH/llvm-mingw/x86_64-w64-mingw32/lib/utf8manifest.o

- 编译器配置: LLVM-MinGW Clang i686, Release
- 编译器配置: LLVM-MinGW Clang i686，发布
IDEPATH/llvm-mingw/bin/i686-w64-mingw32-clang++.exe
i686-w64-mingw32-clang++.exe  "hello.cpp" -o "hello.exe" -pedantic -O2 -pipe -Wall -Wextra -s IDEPATH/llvm-mingw/i686-w64-mingw32/lib/utf8init.o IDEPATH/llvm-mingw/i686-w64-mingw32/lib/utf8manifest.o -static


- 编译器配置: MSVC-compatible Clang x86_64, Release
- 编译器配置: 兼容 MSVC 的 Clang x86_64，发布
D:/Program Files/LLVM/bin/clang++.exe
clang++.exe  "hello.cpp" -o "hello.exe" -pedantic -O2 -pipe -Wall -Wextra -target x86_64-pc-windows-msvc -fms-extensions -fms-compatibility -fdelayed-template-parsing -L"IDEPATH/llvm-mingw/x86_64-pc-windows-msvc/lib" -s -target x86_64-pc-windows-msvc IDEPATH/llvm-mingw/x86_64-pc-windows-msvc/lib/utf8init.o IDEPATH/llvm-mingw/x86_64-pc-windows-msvc/lib/utf8manifest.o -static


- 编译器配置: MSVC-compatible Clang x86_64, Debug
- 编译器配置: 兼容 MSVC 的 Clang x86_64，调试
D:/Program Files/LLVM/bin/clang++.exe
clang++.exe  "hello.cpp" -o "hello.exe" -pedantic -g3 -pipe -Wall -Wextra -target x86_64-pc-windows-msvc -fms-extensions -fms-compatibility -fdelayed-template-parsing -L"IDEPATH/llvm-mingw/x86_64-pc-windows-msvc/lib" -target x86_64-pc-windows-msvc IDEPATH/llvm-mingw/x86_64-pc-windows-msvc/lib/utf8init.o IDEPATH/llvm-mingw/x86_64-pc-windows-msvc/lib/utf8manifest.o

- 编译器配置: MSVC-compatible Clang x86_64, Debug with ASan
- 编译器配置: 兼容 MSVC 的 Clang x86_64，调试（带 ASan）
D:/Program Files/LLVM/bin/clang++.exe
clang++.exe  "hello.cpp" -o "hello.exe" -pedantic -g3 -pipe -Wall -Wextra -target x86_64-pc-windows-msvc -fms-extensions -fms-compatibility -fdelayed-template-parsing -L"IDEPATH/llvm-mingw/x86_64-pc-windows-msvc/lib" -target x86_64-pc-windows-msvc IDEPATH/llvm-mingw/x86_64-pc-windows-msvc/lib/utf8init.o IDEPATH/llvm-mingw/x86_64-pc-windows-msvc/lib/utf8manifest.o

- 编译器配置: MSVC-compatible Clang i686, Release
- 编译器配置: 兼容 MSVC 的 Clang i686，发布
D:/Program Files/LLVM/bin/clang++.exe
clang++.exe  "hello.cpp" -o "hello.exe" -pedantic -O2 -pipe -Wall -Wextra -target i686-pc-windows-msvc -fms-extensions -fms-compatibility -fdelayed-template-parsing -L"IDEPATH/llvm-mingw/i686-pc-windows-msvc/lib" -s -target i686-pc-windows-msvc IDEPATH/llvm-mingw/i686-pc-windows-msvc/lib/utf8init.o IDEPATH/llvm-mingw/i686-pc-windows-msvc/lib/utf8manifest.o -static

- 编译器配置: MinGW-w64 GCC 13.2.0 64-bit Release
D:/MinGW-w64-ucrt/bin/g++.exe
g++.exe  "hello.cpp" -o "hello.exe" -finput-charset=UTF-8 -fexec-charset=gbk -O2 -pipe -s -static

- 编译器配置: MinGW-w64 GCC 13.2.0 64-bit Debug
D:/MinGW-w64-ucrt/bin/g++.exe
g++.exe  "hello.cpp" -o "hello.exe" -finput-charset=UTF-8 -fexec-charset=gbk -g3 -pipe -Wall


::小熊猫C++编译参考
::Debug   clang++.exe  "Temp.cpp" -o "Temp.exe" -g3 -std=c++2a -pipe -Wall --target=x86_64-w64-mingw
::Release clang++.exe  "Temp.cpp" -o "Temp.exe" -O2 -std=gnu++2a -pipe --target=x86_64-w64-mingw -s -static


::-g3 生成调试信息 
::-Wall 启用常见问题警告 
::-O2 优化级别 
::-pipe 编译时使用管道而不是临时文件 
::-s 剥除附加信息 
::-static 用静态链接方式链接库文件 
::-finput-charset=UTF-8 -fexec-charset=gbk 将可执行文件中的字符串转码为ANSI 
::-fmodules-ts 模块支持
::-pedantic 以ANSI/ISO C标准列出的所有警告 当GCC在编译不符合ANSI/ISOC语言标准的源代码时，如果在编译指令中加上了-pedantic选项，那么源程序中使用了扩展语法的地方将产生相应的警告信息。
:: -Wextra 是GCC和Clang编译器的警告选项之一，用于启用额外的警告信息，提高代码质量和安全性。


@cyano.CN  第2个问题，现在的Release发布选项，也开启了这两个警告，以前的版本是不开的 -Wall -Wextra
这是故意的，因为 arm64 涉及交叉编译。交叉编译出来的程序很难调试，通过启用警告可以一定程度上减少无意中的错误，降低调试难度。



我试了一个，使用后，编译出来的exe在GBK和UTF-8环境下都不会乱码了的
源代码：https://github.com/CyanoHao/RedPanda-CPP/tree/compiler-hint/platform/windows/utf8
编译参数：https://github.com/CyanoHao/RedPanda-CPP/blob/compiler-hint/packages/msys/domain/build.sh#L144
标准输入输出不乱码是 utf8init.o 起作用，utf8manifest.o 只影响调用系统 API（如打开文件之类操作）。因此这种方法在老版本系统也能一定程度上起作用，至少对于初学者问题不大。
Windows 10 v1903 及以上：完全支持 UTF-8
Windows 10 v1809：标准输入输出支持 UTF-8（系统不支持 manifest 但可以用 OpenConsole）
早期版本：标准输出支持 UTF-8，只能输入 ASCII 范围内的字符（系统不支持 manifest 也不能用 OpenConsole）
